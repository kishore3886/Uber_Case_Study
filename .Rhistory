testing$probabilities = sapply(predict(tree_model, newdata=testing,type="prob"),'[[',2)
View(testing)
## CREATING RECEIVER OPERATION CURVE
roc_pred <- prediction(testing$probabilities, testing$response)
perf <- performance(roc_pred, "tpr", "fpr")
plot(perf, col="red")
abline(0,1,col="grey")
# get area under the curve
performance(roc_pred,"auc")@y.values
libraray(ISLR)
library(tree)
library(ROCR)
library(caret)
## LOADING DATA
features <- read.csv(file="C:/study/sem_2 studies/Data Analytics/project/final analysis/bank-marketing.csv")
library(party)
head(my_data)
response <- read.csv(file="C:/study/sem_2 studies/Data Analytics/project/final analysis/response.csv")
## COMBINING DEPENDENT AND INDEPENDENT VARIABLES
my_data <- data.frame(features,response)
## SPLITTING DATA INTO HALF FOR TRAINING AND TESTING
set.seed(2)
train <- sample(1:nrow(my_data),nrow(my_data)/0.6)
test <- -train
training <- my_data[train,]
testing <- my_data[test,]
## CREATING MODEL WITH TRAINING DATA
tree_model = ctree(response~age_group + job + salary + marital + education + housing + loan , training)
## VISUALIZING THE MODEL
plot(tree_model,pretty=0)
## PREDICTING WITH TESTING DATA AND STORING THE OUTPUT IN TESTING DATA
testing$predictions = predict(tree_model, testing, type = "response")
testing$probabilities = sapply(predict(tree_model, newdata=testing,type="prob"),'[[',2)
View(testing)
## CREATING RECEIVER OPERATION CURVE
roc_pred <- prediction(testing$probabilities, testing$response)
perf <- performance(roc_pred, "tpr", "fpr")
plot(perf, col="red")
abline(0,1,col="grey")
# get area under the curve
performance(roc_pred,"auc")@y.values
libraray(ISLR)
library(tree)
library(ROCR)
library(caret)
## LOADING DATA
features <- read.csv(file="C:/study/sem_2 studies/Data Analytics/project/final analysis/bank-marketing.csv")
library(party)
head(my_data)
response <- read.csv(file="C:/study/sem_2 studies/Data Analytics/project/final analysis/response.csv")
## COMBINING DEPENDENT AND INDEPENDENT VARIABLES
my_data <- data.frame(features,response)
## SPLITTING DATA INTO HALF FOR TRAINING AND TESTING
set.seed(2)
train <- sample(1:nrow(my_data),nrow(my_data)/0.6)
test <- -train
training <- my_data[train,]
testing <- my_data[test,]
## CREATING MODEL WITH TRAINING DATA
tree_model = ctree(response~age_group + job + salary + marital + education + housing + loan , training)
## VISUALIZING THE MODEL
plot(tree_model,pretty=0)
## PREDICTING WITH TESTING DATA AND STORING THE OUTPUT IN TESTING DATA
testing$predictions = predict(tree_model, testing, type = "response")
testing$probabilities = sapply(predict(tree_model, newdata=testing,type="prob"),'[[',2)
View(testing)
## Confusion Matrix
tree_predict = predict(tree_model, testing, type = "response")
confusionMatrix(tree_predict, testing$response)
## CREATING RECEIVER OPERATION CURVE
roc_pred <- prediction(testing$probabilities, testing$response)
perf <- performance(roc_pred, "tpr", "fpr")
plot(perf, col="red")
abline(0,1,col="grey")
# get area under the curve
performance(roc_pred,"auc")@y.values
libraray(ISLR)
library(tree)
library(ROCR)
library(caret)
## LOADING DATA
features <- read.csv(file="C:/study/sem_2 studies/Data Analytics/project/final analysis/bank-marketing.csv")
library(party)
head(my_data)
response <- read.csv(file="C:/study/sem_2 studies/Data Analytics/project/final analysis/response.csv")
## COMBINING DEPENDENT AND INDEPENDENT VARIABLES
my_data <- data.frame(features,response)
## SPLITTING DATA INTO HALF FOR TRAINING AND TESTING
set.seed(2)
train <- sample(1:nrow(my_data),nrow(my_data)/2)
test <- -train
training <- my_data[train,]
testing <- my_data[test,]
## CREATING MODEL WITH TRAINING DATA
tree_model = ctree(response~age_group + job + salary + marital + education + housing + loan , training)
## VISUALIZING THE MODEL
plot(tree_model,pretty=0)
## PREDICTING WITH TESTING DATA AND STORING THE OUTPUT IN TESTING DATA
testing$predictions = predict(tree_model, testing, type = "response")
testing$probabilities = sapply(predict(tree_model, newdata=testing,type="prob"),'[[',2)
View(testing)
## Confusion Matrix
tree_predict = predict(tree_model, testing, type = "response")
confusionMatrix(tree_predict, testing$response)
## CREATING RECEIVER OPERATION CURVE
roc_pred <- prediction(testing$probabilities, testing$response)
perf <- performance(roc_pred, "tpr", "fpr")
plot(perf, col="red")
abline(0,1,col="grey")
# get area under the curve
performance(roc_pred,"auc")@y.values
q()
vector1 <- c(1,5,9)
vector2 <- c(3,4)
vector <- vector1*vector2
vector
vector1 <- c(1,2,3,3,4,5,5,5,"a")
vector2 <- c(1,2,3,3,4,5,5,5,T)
vector3 <- c(T,T,F,T,"a","r")
vector4 <- c(vector1, vector2, vector3)
typeof(vector)
vector
vector4
typeof(vector4)
x <- c(1, 3, 5, 7)
y <- c(2, 1, 5, 6)
x >= y
sum(x >= y)
4 == 3+TRUE
age <- c( 18, 25, 21, 19, 50)
income <- c(20000, 40000, 30000, 45000, 60000)
sol<-(age >= 18 & age <= 19 & income > 30000) & (age > 19 & age<=21 & income > 10000) | (age > 21)
sol
sol2<-(age >= 18 & age <= 19 & income > 30000) | (age > 19 & age<=21 & income > 10000) | (age > 21)
sol2
Vector1 <- c(“a”,”b”,”c”,NA,“d”,NA)
Vector6 <- c(“a”,”b”,”c”,NA,“d”,NA)
help("is.na")
age <- c(18, 25, 21, 19, 50)
which(age>20)
income = c(20000, 40000, 30000, 45000, 60000)
which(income >20000 & income < 50000)
which(income >20000 and income < 50000)
income(which(income >20000 & income < 50000))
income = c(20000, 40000, 30000, 45000, 60000)
income(which(income >20000 & income < 50000))
income[which(income >20000 & income < 50000)]
age <- c( 18, 25, 21, 19, 50, NA, 32)
income <- c(20000, 40000, 30000, 45000, 60000, 65000, NA)
which[is.na(age)]
which(is.na(age))
is.na(age
)
which(age == ‘NA’)
gender <-  c("m", "f", "m", "m", "f", "m")
str(gender)
gender<- as.factor(gender)
str(gender)
bloodgroup <-  c("O", "B", "A", "B", "AB", "O", "A", "B", "B", "AB", "A", "O")
bloodgroup <- as.factor(bloodgroup)
summary(bloodgroup)
view(bloodgroup)
str(bloodgroup)
matrix(c(2, 4, 3, 1, 5, 7, 5, 6), rows=2, columns=4)
matrix(c(2, 4, 3, 1, 5, 7, 5, 6), nrow=2, ncol=4)
age <- c( 18, 25, 21, 19, 50)
income <- c(20000, 40000, 30000, 45000, 60000)
balance <-c(5000, 12000, 23000, 14000, 6000)
matrix(c(age, income, balance))
matrix(c(age, income, balance), nrow=5, ncol=3)
matrix(c(age, income, balance), nrow=5, ncol=3, byrow=T)
matrix(c(age, income, balance), byrow=T)
sum(m[, 3])
m <-matrix(c(age, income, balance), nrow=5, ncol=3
)
sum(m[, 3])
sum(m[3, ])
sum(m)
sum(m[3, 3])
name <- c("Meena", "Teena", "Kiran", "Nitin", "Harpreet", "Shaikh")
age <- c(23, 34, 26, 28, 25,18)
majorsubject <- c("Maths","English", "Science", "English", "Science", "Maths")
pass <- c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE)
students <- data.frame(name, age, majorsubject, pass)
students <- data(name, age, majorsubject, pass)
name <- c("Meena", "Teena", "Kiran", "Nitin", "Harpreet", "Shaikh")
age <- c(23, 34, 26, 28, 25,18)
majorsubject <- c("Maths","English", "Science", "English", "Science", "Maths")
pass <- c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE)
students <- data(name, age, majorsubject, pass)
students
students[1]
gender <- c("Female", "Female", "Male", "Male", "Female", "Male")
overallpercentage<- c(54, 67, 46, 59, 64, 48)
data <- data.frame(gender, overallpercentage)
students <- rbind(data, students)
students <- rbind(data, students)
students
name <- c("Meena", "Teena", "Kiran", "Nitin", "Harpreet", "Shaikh")
age <- c(23, 34, 26, 28, 25,18)
majorsubject <- c("Maths","English", "Science", "English", "Science", "Maths")
pass <- c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE)
students <- data.frame(name, age, majorsubject, pass)
gender <- c("Female", "Female", "Male", "Male", "Female", "Male")
overallpercentage<- c(54, 67, 46, 59, 64, 48)
data <- data.frame(gender, overallpercentage)
students <- cbind(students, data)
students
name <- c("Kunal", "Hema", "Mohini", "Preet", "Myra", "Salma")
age<- c(26, 34, 28, 19, 25, 32)
majorsubject <- c("Science", "Maths","English", "Hindi", "Maths", "Maths")
pass <- c(FALSE,TRUE, FALSE,TRUE, TRUE, FALSE)
gender <- c("Male", "Female", "Female", "Male", "Female", "Female")
overallpercentage<- c(38, 67, 53, 62, 68, 53 )
students2 <- data.frame(name,age,majorsubject,pass,gender,overallpercentage)
students2
finaldata <- rbind(students, students2)
finaldata
summary((finaldata))
finaldata[4,1] <- "Nitish"
finaldata$name <- as.character(finaldata$name)
finaldata
finaldata$name
which(is.na(finaldata$name)) <- "Nitish"
finaldata[which(is.na(finaldata$name)), 1] <- "Nitish"
finaldata$name
marks <- c(82, 59, 45, 90, 71)
if (mean(marks) >= 60):
print("No re-exam")
else:
print("re-exam")
if (mean(marks) >= 60)
print("No re-exam")
else
print("re-exam")
if (mean(marks) >= 60)
print("No re-exam")
else
print("re-exam")
marks <- c(82, 59, 45, 90, 71)
if (marks >=90) {
grade <- "A"
print(grade)
} else if (marks>=80){
grade <- "B"
print(grade)
} else if (marks>=70) {
grade <- "C"
print(grade)
} else if (marks>=60) {
grade <- "D"
print(grade)
} else if (marks>=50) {
grade <- "E"
print(grade)
} else {
grade <-"F"
print(grade)
}
str(mtcars)
cars <- mtcars
cars
cars[,1]
for(i in 1:cars.length())
print i
print (i)
for(i in 1:cars.length())
print(i)
cars
cars$score<-cars$mpg*cars$hp/cars$wt
s<-cars$score
s
performance <- vector(mode="character", length=length(cars$score))
performance
num=3
num
num=3.00
num
n=3.01
n
summary(cars$performance)
x <- c(“I”, “eat”, “apple”)
x <- c('I', 'eat', 'apple')
lapply(x,nchar)
x <- c('i eat apple')
lapply(x,nchar)
v<-c("2", "3", "4")
typeof(v)
v1<-(2,3,4)
v1<-c(2,3,4)
v2<-v+v1
v<-as.numeric(v)
typeof(v)
matrix(1:6, 2, 3)
matrix(1:6, 2, ,TRUE)
matrix(1:6, 2, ,FALSE)
matrix(1:6, 2, ,FALSE)
matrix(1:6, 3, 2)
cars
typeof(cars)
typeof(mcars)
data.frame(sapply(cars, factor))
typeof(cars)
x <- 8
f <- function() {
y <- x+2
return(c(x, y))
}
f()
f <- function() {
x <- 8
y <- x+2
return(c(x, y))
}
y
f <- function() {
a <- 8
b <- x+2
return(c(a, b))
}
b
function_math <- function(x, y){
z <- x + y
p <- x * y
q <- z / p
return(c(z, p, q))
}
alpha <- function_math(2, 3)
alpha[2]
A <- c(5,4,1,3,8,1)
length(which(A == 1))
sum(which(A == 1)
a
length(which(A = 1))
name(cars)
names(cars)
columns.names(cars)
attributes(cars)
mtcars[2:3, ]
mtcars[c(2,3), ]
mtcars[seq(2,3), ]
mtcars[seq(2,3,1), ]
bollywood <- read.csv("C:/study/iitb/main program/r/bollywood")
bollywood <- read.csv("C:/study/iitb/main program/r/bollywood.csv")
View(bollywood)
str(bollywood)
bollywood$Movie <- as.character(bollywood$Movie)
last_10 <- last_10(bollywood$Movie)
last_10 <- bollywood$Movie[-10:]
last_10 <- bollywood$Movie[-10]
last_10
last_10 <- bollywood$Movie[10]
last_10
last_10 <- bollywood$Movie[10:]
last_10 <- bollywood$Movie[51:61]
last_10
last_10 <- bollywood$Movie[-10]
last_10
last_10 <- bollywood$Movie[51:61]
last_10
na_bollywood <- sum(is.na(bollywood))
na_bollywood
top_movie <- max(bollywood$Tcollection)
top_movie
top_movie<-apply(bollywood,Tcollection,max)
top_movie<-apply(bollywood,7,max)
top_movie <- if (max(bollywood$Tcollection)) bollywood$Movie
top_movie
top_movie <-max(bollywood$Tcollection,bollywood$Movie )
top_movie
bollywood_sorted <- bollywood(order(tcollection))
bollywood_sorted <- bollywood[order(-tcollection)]
bollywood_sorted <- bollywood[order(-Tcollection)]
bollywood_sorted <- bollywood[order(-bollywood$Tcollection)]
bollywood_sorted <- bollywood[order(-bollywood$Tcollection),]
bollywood_sorted
view(bollywood_sorted)
top_movie <- bollywood_sorted[1,1]
top_movie
top_movie <- bollywood_sorted[2,1]
top_movie <- bollywood_sorted[1,1]
top_2_movie <- bollywood_sorted[2,1]
top_2_movie
shahrukh <- subset(bollywood, Lead == "Shahrukh")
akshay <- subset(bollywood, Lead == "Akshay")
amitabh <- subset(bollywood, Lead  == "Amitabh")
shahrukh
shahrukh_collection <- sum(shahrukh$Tcollection)
shahrukh_collection
akshay_collection
akshay_collection <- sum(akshay$Tcollection)
akshay_collection
amitabh_collection <- sum(amitabh_collection$tcollection)
amitabh_collection <- sum(amitabh$tcollection)
amitabh_collection
amitabh
amitabh_collection <- sum(amitabh$tcollection)
amitabh_collection
amitabh_collection <- sum(amitabh$Tcollection)
amitabh_collection
bollywood
bollywood$Verdict
count(bollywood$Verdict)
flop<- nrow(subset(bollywood,bollywood$Verdict=="FLOP"))
flop
flop<- nrow(subset(bollywood,bollywood$Verdict=="Flop"))
flop
flop<- nrow(subset(bollywood,bollywood$Verdict=="Flop"))
average <-nrow(subset(bollywood,bollywood$Verdict=="Average"))
hit<-nrow(subset(bollywood,bollywood$Verdict=="Hit"))
superhit<-nrow(subset(bollywood,bollywood$Verdict=="Super Hit"))
superhit
hit
average
flop
bollywood
movie_result <- sapply(bollywood,max(bollywood$Ocollection))
T_collection <- max(bollywood$Tcollection)
T_collection
T_collection <- C(max(bollywood$Tcollection),bollywood$Movie)
T_collection <- as.factor(max(bollywood$Tcollection),bollywood$Movie)
r1<- bollywood$Ocollection[sapply (bollywood [1:61],which.max)]
r1<- bollywood$Ocollection[sapply (bollywood [m:n],which.max)]
r1<- bollywood$names[sapply (bollywood [4:6],which.max)]
r1
bollywood
r1<- bollywood$names[sapply (bollywood [1:61],which.max)]
r1<- bollywood$names[sapply (bollywood [3:4],which.max)]
r1
r1<- bollywood$names[sapply (bollywood [4],which.max)]
r1
r1<- bollywood$Movie[sapply (bollywood [4],which.max)]
r1
Ocollection<- bollywood$Movie[sapply (bollywood [4],which.max)]
Wcollection<- bollywood$Movie[sapply (bollywood [5],which.max)]
FWcollection<- bollywood$Movie[sapply (bollywood [6],which.max)]
Tcollection<- bollywood$Movie[sapply (bollywood [7],which.max)]
movie_result <- c(Ocollection,Wcollection,FWcollection,Tcollection)
movie_result
bollywood
top<-bollywood[which.max(bollywood$Tcollection),1]
top
oc<- bollywood[which.max(bollywood$Ocollection),1]
oc
top2<- bollywood[which.max(bollywood$Tcollection== sort(bollywood$Tcollection),1)
]
oc<- bollywood[which.max(bollywood$Ocollection),1]
wc<-bollywood[which.max(bollywood$Wcollection),1]
fc<-bollywood[which.max(bollywood$Fwcollection),1]
tc<-bollywood[which.max(bollywood$Tcollection),1]
movie_result <- c(Oc,wc,fc,tc)
oc<- bollywood[which.max(bollywood$Ocollection),1]
wc<-bollywood[which.max(bollywood$Wcollection),1]
fc<-bollywood[which.max(bollywood$Fwcollection),1]
tc<-bollywood[which.max(bollywood$Tcollection),1]
movie_result2 <- c(oc,wc,fc,tc)
movie_result2
libraray(ISLR)
library(tree)
library(ROCR)
library(caret)
## LOADING DATA
features <- read.csv(file="C:/study/sem_2 studies/Data Analytics/project/final analysis/bank-marketing.csv")
library(party)
head(my_data)
response <- read.csv(file="C:/study/sem_2 studies/Data Analytics/project/final analysis/response.csv")
## COMBINING DEPENDENT AND INDEPENDENT VARIABLES
my_data <- data.frame(features,response)
## SPLITTING DATA INTO HALF FOR TRAINING AND TESTING
set.seed(2)
train <- sample(1:nrow(my_data),nrow(my_data)/2)
test <- -train
training <- my_data[train,]
testing <- my_data[test,]
## CREATING MODEL WITH TRAINING DATA
tree_model = ctree(response~age_group + job + salary + marital + education + housing + loan , training)
## VISUALIZING THE MODEL
plot(tree_model,pretty=0)
## PREDICTING WITH TESTING DATA AND STORING THE OUTPUT IN TESTING DATA
testing$predictions = predict(tree_model, testing, type = "response")
testing$probabilities = sapply(predict(tree_model, newdata=testing,type="prob"),'[[',2)
View(testing)
## Confusion Matrix
tree_predict = predict(tree_model, testing, type = "response")
confusionMatrix(tree_predict, testing$response)
## CREATING RECEIVER OPERATION CURVE
roc_pred <- prediction(testing$probabilities, testing$response)
perf <- performance(roc_pred, "tpr", "fpr")
plot(perf, col="red")
abline(0,1,col="grey")
# get area under the curve
performance(roc_pred,"auc")@y.values
q()
install.packages("tidyr")
install.packages("dplyr")
q()
top9
library("dplyr")
update.packages(ask='graphics',checkBuilt=TRUE)
q()
q()
q()
Sys.Date()
typeof(Sys.Date())
Sys.Date()+10
Sys.Date()+30
as.integer(Sys.Date())
read.csv("UberRequestData.csv")
setwd("~/R/uber case study")
read.csv("UberRequestData.csv")
read.csv("C:/Users/User/Documents/R/uber case study/Uber Request Data.csv")
uber_Data<-read.csv("Uber Request Data.csv")
